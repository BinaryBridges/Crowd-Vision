apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: app
  labels: { app: redis }
spec:
  replicas: 1
  selector: { matchLabels: { app: redis } }
  template:
    metadata:
      labels: { app: redis }
    spec:
      serviceAccountName: app-sa
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      containers:
        - name: redis
          # Use Redis 8 (built-in Query/JSON/TimeSeries/Bloom)
          image: redis:8
          args:
            - redis-server
            - --maxmemory
            - "2gb"
            - --maxmemory-policy
            - allkeys-lru

            # Lightweight persistence (AOF every second ~= ~1s loss)
            - --appendonly
            - "yes"
            - --appendfsync
            - everysec

            # Optional RDB snapshots (keep if you want periodic backups)
            - --save
            - "1"
            - "1"
            - --save
            - "5"
            - "10"
            - --save
            - "60"
            - "1000"

            # Stream node sizing (unchanged in Redis 8)
            - --stream-node-max-bytes
            - "4096"
            - --stream-node-max-entries
            - "100"

            # Update deprecated *ziplist* tunables to *listpack* in Redis 7+/8
            - --hash-max-listpack-entries
            - "512"
            - --hash-max-listpack-value
            - "64"
            - --list-max-listpack-size
            - "-2"
          ports:
            - containerPort: 6379
              name: redis
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    redis-cli BGSAVE || true
                    redis-cli SHUTDOWN SAVE
          resources:
            requests: { cpu: "200m", memory: "2Gi" }
            limits:   { cpu: "1000m", memory: "2Gi" }
          livenessProbe:
            tcpSocket: { port: 6379 }
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec: { command: ["redis-cli","ping"] }
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            exec: { command: ["redis-cli","ping"] }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: app
  labels: { app: redis }
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 5Gi
